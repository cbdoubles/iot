#include "WiFiS3.h"
#include <SPI.h>
#include <MFRC522.h>

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "DonationBoy";        // your network SSID (name)
char pass[] = "Password";        // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;                 // your network key index number (needed only for WEP)
String tagID = "";

#define SS_PIN 10
#define RST_PIN 9

byte readCard[4];
String MasterTag = "90684726";

MFRC522 mfrc522(SS_PIN, RST_PIN);

int led =  LED_BUILTIN;
int status = WL_IDLE_STATUS;
WiFiServer server(80);

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(led, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(4, OUTPUT);

  while (!Serial);
  Serial.println("Access Point Web Server");

  SPI.begin();
  mfrc522.PCD_Init();


  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  // by default the local IP address will be 192.168.4.1
  // you can override it with the following:
  WiFi.config(IPAddress(192,48,56,2));

  // print the network name (SSID);
  Serial.print("Creating access point named: ");
  Serial.println(ssid);

  // Create open network. Change this line if you want to create an WEP network:
  status = WiFi.beginAP(ssid, pass);
  if (status != WL_AP_LISTENING) {
    Serial.println("Creating access point failed");
    // don't continue
    while (true);
  }

  // wait 10 seconds for connection:
  delay(10000);

  // start the web server on port 80
  server.begin();

  // you're connected now, so print out the status
  printWiFiStatus();
}


void loop() {
  // compare the previous status to the current status
  if (status != WiFi.status()) {
    // it has changed update the variable
    status = WiFi.status();

    if (status == WL_AP_CONNECTED) {
      // a device has connected to the AP
      Serial.println("Device connected to AP");
    } else {
      // a device has disconnected from the AP, and we are back in listening mode
      Serial.println("Device disconnected from AP");
    }
  }
  HandleClient();
  
}

void HandleClient(){
  WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      delayMicroseconds(10);                // This is required for the Arduino Nano RP2040 Connect - otherwise it will loop so fast that SPI will never be served.
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out to the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("<p style=\"font-size:7vw;\">Click <a href=\"/H\">here</a> turn the LED on<br></p>");
            client.print("<p style=\"font-size:7vw;\">Click <a href=\"/L\">here</a> turn the LED off<br></p>");

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          }
          else {      // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        }
        else if (c != '\r') {    // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        /**
        if(currentLine.endsWith("GET /1")) {
          client.println("HTTP/1.1 200 Locker 1 opened");
          client.println("Content-type:text/html");
          client.println("Access-Control-Allow-Origin: *");
          client.println();
          client.println(1);
          client.println();
          Serial.println("test");
          break;
        }
        */
        if (currentLine.indexOf("OST /Locker/") > 0) {
          int parsedValue = 0;
          while (client.available()) {
            char c = client.read();
            if (c == ' ') {
              break;
            } else {
              parsedValue = parsedValue * 10 + (c - 48);
            }
          }

          Serial.println("");
          Serial.println(parsedValue);
          handleLockerCommand(parsedValue);
          client.println("HTTP/1.1 200 Locker" + String(parsedValue) + "opened");
          client.println("Content-type:text/html");
          client.println("Access-Control-Allow-Origin: *");
          client.println();
          client.println(parsedValue);
          client.println();

          break;
        }

        if (currentLine.endsWith("GET /rfid")) {
          Serial.println("test");
          long startTimer = millis();
          while (!getID() && !(millis() - startTimer > 6000);
          client.println("HTTP/1.1 200 RFID");
          client.println("Content-type:text/html");
          client.println("Access-Control-Allow-Origin: *");
          client.println();

          // the content of the HTTP response follows the header:
            client.print(tagID);
          // The HTTP response ends with another blank line:
          client.println();
          // break out of the while loop:
          break;
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}

void printWiFiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print where to go in a browser:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}

// boolean getID() {
//   Serial.println("Here");
//   delay(500);
  
//   if (!mfrc522.PICC_IsNewCardPresent()) {
//     Serial.println("First if failed");
//     return false;
//   }

//   if (!mfrc522.PICC_ReadCardSerial()) {
//     Serial.println("Second if failed");
//     return false;
//   }
//   tagID = "";

//   for ( uint8_t i = 0; i < 4; i++) {
//   tagID.concat(String(mfrc522.uid.uidByte[i], HEX));
//   }
//   tagID.toUpperCase();

//   mfrc522.PICC_HaltA();
//   Serial.println(tagID);
//   return true;
// }

boolean getID() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return false;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return false;
  }
  tagID = "";

  for ( uint8_t i = 0; i < 4; i++) {
  tagID.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  tagID.toUpperCase();

  mfrc522.PICC_HaltA();
  return true;
}

void handleLockerCommand(int var) {
  switch (var) {
    case 1:
      Serial.println("Locker 1");
      digitalWrite(5, HIGH);
      delay(500);
      digitalWrite(5, LOW);
      break;
    case 2:
      Serial.println("Locker 2");
      digitalWrite(4, HIGH);
      delay(500);
      digitalWrite(4, LOW);
      break;
  }
}

int parseString(String inputString) {
  Serial.println(inputString);
  // Find the position of the last '/' character
  int lastSlashIndex = inputString.indexOf("Locker");

  // Extract the substring after the last '/' character
  int firstIndexOfInt = lastSlashIndex + 7;
  String sum = "";
  while (inputString[firstIndexOfInt] != ' ') {
    Serial.println(inputString[firstIndexOfInt]);
    Serial.println(sum);
    firstIndexOfInt++;
  }
  // Convert the substring to an integer
  return sum.toInt();
}
