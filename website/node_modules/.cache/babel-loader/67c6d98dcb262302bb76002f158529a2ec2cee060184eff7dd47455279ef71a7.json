{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nconst dblib = {\n  data() {\n    return {\n      loading: false,\n      rfid: -1,\n      arduino: 'http://192.168.178.157',\n      database: 'localhost:####',\n      product: []\n    };\n  },\n  methods: {\n    async login() {\n      this.loading = true;\n      this.rfid = -1;\n      console.log('getting RFID');\n      this.scanRFID();\n      console.log('checking uuid');\n      this.verifyLogin();\n      this.loading = false;\n    },\n    // Waits for the arduino to send a uuid.\n    // currently it will not time out or anything.\n    async scanRFID() {\n      axios.get(this.arduino + '/rfid').then(response => {\n        this.rfid = response;\n      });\n    },\n    // Checks the uuid gotten from the arduino against database.\n    // if valid user, go to the browse page.\n    async verifyLogin() {\n      axios.get(this.database + '/users?' + this.rfid).then(response => {\n        if (response.data) {\n          this.$router.push('/browse');\n        } else {\n          console.log('invalid uuid.');\n        }\n      }).catch(error => {\n        this.loading = false;\n        console.log(error);\n      });\n    }\n  },\n  async getItems() {\n    this.loading = true;\n    axios.get(this.database + '/items').then(response => response.json()).then(json => {\n      this.load = false;\n      this.products = json;\n    }).catch(error => {\n      this.loading = false;\n      console.log(error);\n    });\n  }\n};\nexport default dblib;","map":{"version":3,"names":["axios","dblib","data","loading","rfid","arduino","database","product","methods","login","console","log","scanRFID","verifyLogin","get","then","response","$router","push","catch","error","getItems","json","load","products"],"sources":["C:/Users/20223065/Documents/donationboxv2/src/dblib.js"],"sourcesContent":["import axios from 'axios'\r\nconst dblib = {\r\n\r\n    data() {\r\n      return { \r\n        loading: false,\r\n        rfid: -1,\r\n        arduino: 'http://192.168.178.157',\r\n        database: 'localhost:####',\r\n        product: []\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      async login() {\r\n        this.loading = true\r\n        this.rfid =  -1\r\n        console.log('getting RFID')\r\n        this.scanRFID()\r\n        console.log('checking uuid')\r\n        this.verifyLogin()\r\n        this.loading = false\r\n      },\r\n\r\n\r\n      // Waits for the arduino to send a uuid.\r\n      // currently it will not time out or anything.\r\n      async scanRFID() {\r\n        axios.get(this.arduino + '/rfid')\r\n          .then(response => {this.rfid = response})\r\n      },\r\n\r\n      // Checks the uuid gotten from the arduino against database.\r\n      // if valid user, go to the browse page.\r\n      async verifyLogin() {\r\n        axios.get(this.database + '/users?' + this.rfid)\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.$router.push('/browse')\r\n            } else {\r\n              console.log('invalid uuid.')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.loading = false\r\n            console.log(error)\r\n        })\r\n      },\r\n    },\r\n\r\n\r\n    async getItems() {\r\n      this.loading = true\r\n      axios.get(this.database + '/items')\r\n          .then(response => response.json())\r\n          .then(json => {\r\n              this.load = false\r\n              this.products = json\r\n          })\r\n          .catch(error => {\r\n              this.loading = false\r\n              console.log(error)\r\n          })\r\n  }\r\n  }\r\n  \r\n  export default dblib"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,KAAK,GAAG;EAEVC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,KAAK;MACdC,IAAI,EAAE,CAAC,CAAC;MACRC,OAAO,EAAE,wBAAwB;MACjCC,QAAQ,EAAE,gBAAgB;MAC1BC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAACN,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,IAAI,GAAI,CAAC,CAAC;MACfM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,IAAI,CAACC,QAAQ,CAAC,CAAC;MACfF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAI,CAACE,WAAW,CAAC,CAAC;MAClB,IAAI,CAACV,OAAO,GAAG,KAAK;IACtB,CAAC;IAGD;IACA;IACA,MAAMS,QAAQA,CAAA,EAAG;MACfZ,KAAK,CAACc,GAAG,CAAC,IAAI,CAACT,OAAO,GAAG,OAAO,CAAC,CAC9BU,IAAI,CAACC,QAAQ,IAAI;QAAC,IAAI,CAACZ,IAAI,GAAGY,QAAQ;MAAA,CAAC,CAAC;IAC7C,CAAC;IAED;IACA;IACA,MAAMH,WAAWA,CAAA,EAAG;MAClBb,KAAK,CAACc,GAAG,CAAC,IAAI,CAACR,QAAQ,GAAG,SAAS,GAAG,IAAI,CAACF,IAAI,CAAC,CAC7CW,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,CAACd,IAAI,EAAE;UACjB,IAAI,CAACe,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;QAC9B,CAAC,MAAM;UACLR,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B;MACF,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAI;QACd,IAAI,CAACjB,OAAO,GAAG,KAAK;QACpBO,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ;EACF,CAAC;EAGD,MAAMC,QAAQA,CAAA,EAAG;IACf,IAAI,CAAClB,OAAO,GAAG,IAAI;IACnBH,KAAK,CAACc,GAAG,CAAC,IAAI,CAACR,QAAQ,GAAG,QAAQ,CAAC,CAC9BS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACO,IAAI,IAAI;MACV,IAAI,CAACC,IAAI,GAAG,KAAK;MACjB,IAAI,CAACC,QAAQ,GAAGF,IAAI;IACxB,CAAC,CAAC,CACDH,KAAK,CAACC,KAAK,IAAI;MACZ,IAAI,CAACjB,OAAO,GAAG,KAAK;MACpBO,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;IACtB,CAAC,CAAC;EACV;AACA,CAAC;AAED,eAAenB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}