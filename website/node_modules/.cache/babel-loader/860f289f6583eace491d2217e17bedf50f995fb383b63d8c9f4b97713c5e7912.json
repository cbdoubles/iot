{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_file_input, {\n    label: \"File input\",\n    outlined: \"\",\n    dense: \"\",\n    capture: \"user\",\n    accept: \"image/*\"\n  })]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_v_file_input","label","outlined","dense","capture","accept"],"sources":["C:\\Users\\20223065\\Documents\\django_be\\website\\src\\components\\DonationInput.vue"],"sourcesContent":["<template>\r\n    <div>\r\n\r\n      <v-file-input\r\n      label=\"File input\"\r\n      outlined\r\n      dense\r\n      capture=\"user\"\r\n      accept=\"image/*\"\r\n    ></v-file-input>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import dblib from '@/dblib';\r\n  import PopupBox from '@/components/PopupBox.vue';\r\n  \r\n  export default {\r\n    components: {\r\n        PopupBox,\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        title: '',\r\n        description: '',\r\n        box: '',\r\n        box_id: '',\r\n        box_number: 0,\r\n        get_image: '',\r\n      };\r\n    },\r\n    mixins: [dblib],\r\n\r\n    methods: {\r\n      async submitForm() {\r\n        try {\r\n          await this.showPopup(`Go to Box ${this.box_number} to donate your item. Thank you!`);\r\n          await this.createProduct({\r\n            box_uid: this.box_id,\r\n            title: this.title, \r\n            description: this.description,\r\n            get_image: this.get_image,\r\n          });\r\n          this.$router.push({path: `/login`});\r\n  \r\n          // Optionally, you can handle the response - uncomment\r\n          // console.log('Server Response:', response.data);\r\n  \r\n          // Emit an event to notify the parent component\r\n          this.$emit('form-submitted', { \r\n            box_id: this.box_id,\r\n            box_number: this.box_number,\r\n            title: this.title, \r\n            description: this.description,\r\n            get_image: this.get_image,\r\n          });\r\n  \r\n        } catch (error) {\r\n          console.error('Error submitting form:', error);\r\n          // Optionally, you can handle errors and show a message to the user\r\n        }\r\n      },\r\n\r\n      async showPopup(message) {\r\n            // Access the showPopup method of the PopupBox component\r\n            await this.$refs.popupBox.showPopup(message);\r\n        },\r\n    },\r\n\r\n    async created() {\r\n    // Call getItems when the component is created\r\n        try {\r\n            this.isLoading = true;\r\n            this.box = await this.getFreeBox();\r\n            console.log(\"Box_num: \", this.box.box_num);\r\n            if(this.box.box_num == -1) {\r\n              await this.showPopup(`There are no available boxes :((`);\r\n              this.$router.push({path: `/login`});\r\n            } else {\r\n              this.box_id = this.box.unique_ID;\r\n              this.box_number = this.box.box_num;\r\n              console.log(\"Box_id: \", this.box_id);\r\n              console.log(\"Box_num: \", this.box_number);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching product:', error);\r\n        } finally {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add styling if needed */\r\n  </style>\r\n  "],"mappings":";;;uBACIA,mBAAA,CASM,cAPJC,YAAA,CAMcC,uBAAA;IALdC,KAAK,EAAC,YAAY;IAClBC,QAAQ,EAAR,EAAQ;IACRC,KAAK,EAAL,EAAK;IACLC,OAAO,EAAC,MAAM;IACdC,MAAM,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}