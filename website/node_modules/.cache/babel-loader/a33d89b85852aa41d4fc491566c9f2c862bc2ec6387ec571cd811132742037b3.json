{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, withKeys as _withKeys, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-eeaf4634\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"container\",\n  id: \"picture-input\",\n  class: \"picture-input\"\n};\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = [\"innerHTML\"];\nconst _hoisted_5 = [\"innerHTML\"];\nconst _hoisted_6 = {\n  key: 2\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = [\"name\", \"id\", \"accept\", \"capture\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$options.supportsUpload ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    innerHTML: $data.strings.upload\n  }, null, 8, _hoisted_2)) : $options.supportsPreview ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", {\n    class: \"preview-container\",\n    style: _normalizeStyle({\n      maxWidth: $data.previewWidth + 'px',\n      height: $data.previewHeight + 'px',\n      borderRadius: $props.radius + '%'\n    })\n  }, [_createElementVNode(\"canvas\", {\n    ref: \"previewCanvas\",\n    class: _normalizeClass([\"picture-preview\", $options.computedClasses]),\n    tabindex: \"0\",\n    onDrag: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\", \"prevent\"])),\n    onDragover: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"stop\", \"prevent\"])),\n    onDragstart: _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"stop\", \"prevent\"])),\n    onDragend: _cache[3] || (_cache[3] = _withModifiers(() => {}, [\"stop\", \"prevent\"])),\n    onDragenter: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.onDragEnter && $options.onDragEnter(...args), [\"stop\", \"prevent\"])),\n    onDragleave: _cache[5] || (_cache[5] = _withModifiers((...args) => $options.onDragLeave && $options.onDragLeave(...args), [\"stop\", \"prevent\"])),\n    onDrop: _cache[6] || (_cache[6] = _withModifiers((...args) => $options.onFileDrop && $options.onFileDrop(...args), [\"stop\", \"prevent\"])),\n    onClick: _cache[7] || (_cache[7] = _withModifiers((...args) => $options.onClick && $options.onClick(...args), [\"prevent\"])),\n    onKeyup: _cache[8] || (_cache[8] = _withKeys((...args) => $options.onClick && $options.onClick(...args), [\"enter\"])),\n    style: _normalizeStyle({\n      height: $data.previewHeight + 'px',\n      zIndex: parseInt($props.zIndex) + 1\n    })\n  }, null, 38), !$data.imageSelected && !$props.plain ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"picture-inner\",\n    style: _normalizeStyle({\n      top: -$data.previewHeight + 'px',\n      marginBottom: -$data.previewHeight + 'px',\n      fontSize: $options.fontSize,\n      borderRadius: $props.radius + '%',\n      zIndex: parseInt($props.zIndex) + 2\n    })\n  }, [$options.supportsDragAndDrop ? (_openBlock(), _createElementBlock(\"span\", {\n    key: 0,\n    class: \"picture-inner-text\",\n    innerHTML: $data.strings.drag\n  }, null, 8, _hoisted_4)) : (_openBlock(), _createElementBlock(\"span\", {\n    key: 1,\n    class: \"picture-inner-text\",\n    innerHTML: $data.strings.tap\n  }, null, 8, _hoisted_5))], 4)) : _createCommentVNode(\"\", true)], 4), $data.imageSelected && !$props.hideChangeButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[9] || (_cache[9] = _withModifiers((...args) => $options.selectImage && $options.selectImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.buttonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.change), 3)) : _createCommentVNode(\"\", true), $data.imageSelected && $props.removable ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[10] || (_cache[10] = _withModifiers((...args) => $options.removeImage && $options.removeImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.removeButtonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.remove), 3)) : _createCommentVNode(\"\", true), $data.imageSelected && $props.toggleAspectRatio && $props.width !== $props.height ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[11] || (_cache[11] = _withModifiers((...args) => $options.rotateImage && $options.rotateImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.aspectButtonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.aspect), 3)) : _createCommentVNode(\"\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [!$data.imageSelected ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[12] || (_cache[12] = _withModifiers((...args) => $options.selectImage && $options.selectImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.buttonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.select), 3)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"div\", {\n    innerHTML: $data.strings.selected\n  }, null, 8, _hoisted_8), !$props.hideChangeButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[13] || (_cache[13] = _withModifiers((...args) => $options.selectImage && $options.selectImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.buttonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.change), 3)) : _createCommentVNode(\"\", true), $props.removable ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[14] || (_cache[14] = _withModifiers((...args) => $options.removeImage && $options.removeImage(...args), [\"prevent\"])),\n    class: _normalizeClass($props.removeButtonClass),\n    type: \"button\"\n  }, _toDisplayString($data.strings.remove), 3)) : _createCommentVNode(\"\", true)]))])), _createElementVNode(\"input\", {\n    ref: \"fileInput\",\n    type: \"file\",\n    name: $props.name,\n    id: $props.id,\n    accept: $props.accept,\n    onChange: _cache[15] || (_cache[15] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n    capture: $props.capture\n  }, null, 40, _hoisted_9)], 512);\n}","map":{"version":3,"names":["ref","id","class","_createElementBlock","_hoisted_1","$options","supportsUpload","innerHTML","$data","strings","upload","supportsPreview","_hoisted_3","_createElementVNode","style","_normalizeStyle","maxWidth","previewWidth","height","previewHeight","borderRadius","$props","radius","_normalizeClass","computedClasses","tabindex","onDrag","_cache","_withModifiers","onDragover","onDragstart","onDragend","onDragenter","args","onDragEnter","onDragleave","onDragLeave","onDrop","onFileDrop","onClick","onKeyup","_withKeys","zIndex","parseInt","imageSelected","plain","top","marginBottom","fontSize","supportsDragAndDrop","drag","tap","hideChangeButton","selectImage","buttonClass","type","change","removable","removeImage","removeButtonClass","remove","toggleAspectRatio","width","rotateImage","aspectButtonClass","aspect","_hoisted_6","select","_hoisted_7","selected","name","accept","onChange","onFileChange","capture"],"sources":["C:\\Users\\20223065\\Documents\\django_be\\website\\node_modules\\vue-picture-input\\PictureInput.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" id=\"picture-input\" class=\"picture-input\">\n    <div v-if=\"!supportsUpload\" v-html=\"strings.upload\"></div>\n    <div v-else-if=\"supportsPreview\">\n      <div class=\"preview-container\"\n        :style=\"{maxWidth: previewWidth + 'px', height: previewHeight + 'px', borderRadius: radius + '%'}\">\n          <canvas ref=\"previewCanvas\"\n            class=\"picture-preview\"\n            tabindex=\"0\"\n            :class=\"computedClasses\"\n            @drag.stop.prevent=\"\"\n            @dragover.stop.prevent=\"\"\n            @dragstart.stop.prevent=\"\"\n            @dragend.stop.prevent=\"\"\n            @dragenter.stop.prevent=\"onDragEnter\"\n            @dragleave.stop.prevent=\"onDragLeave\"\n            @drop.stop.prevent=\"onFileDrop\"\n            @click.prevent=\"onClick\"\n            @keyup.enter=\"onClick\"\n            :style=\"{height: previewHeight + 'px', zIndex: parseInt(zIndex) + 1 }\">\n          </canvas>\n        <div v-if=\"!imageSelected && !plain\"\n          class=\"picture-inner\"\n            :style=\"{top: -previewHeight + 'px', marginBottom: -previewHeight + 'px', fontSize: fontSize, borderRadius: radius + '%', zIndex: parseInt(zIndex) + 2}\">\n          <span v-if=\"supportsDragAndDrop\" class=\"picture-inner-text\" v-html=\"strings.drag\"></span>\n          <span v-else class=\"picture-inner-text\" v-html=\"strings.tap\"></span>\n        </div>\n      </div>\n      <button v-if=\"imageSelected && !hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\" type=\"button\">{{ strings.change }}</button>\n      <button v-if=\"imageSelected && removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\" type=\"button\">{{ strings.remove }}</button>\n      <button v-if=\"imageSelected && toggleAspectRatio && width !== height\" @click.prevent=\"rotateImage\" :class=\"aspectButtonClass\" type=\"button\">{{ strings.aspect }}</button>\n    </div>\n    <div v-else>\n      <button v-if=\"!imageSelected\" @click.prevent=\"selectImage\" :class=\"buttonClass\" type=\"button\">{{ strings.select }}</button>\n      <div v-else>\n        <div v-html=\"strings.selected\"></div>\n        <button v-if=\"!hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\" type=\"button\">{{ strings.change }}</button>\n        <button v-if=\"removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\" type=\"button\">{{ strings.remove }}</button>\n      </div>\n    </div>\n    <input ref=\"fileInput\" type=\"file\" :name=\"name\" :id=\"id\" :accept=\"accept\" @change=\"onFileChange\" :capture=\"capture\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'picture-input',\n  props: {\n    width: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    height: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    margin: {\n      type: [String, Number],\n      default: 0\n    },\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    capture: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: [String, Number],\n      default: null\n    },\n    buttonClass: {\n      type: String,\n      default: 'btn btn-primary button'\n    },\n    removeButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    aspectButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    prefill: {\n      // check for File API existence, do not fail with server side rendering\n      type: (typeof File === 'undefined' || typeof Blob === 'undefined') ? [String] : [String, File, Blob],\n      default: ''\n    },\n    prefillOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    crop: {\n      type: Boolean,\n      default: true\n    },\n    radius: {\n      type: [String, Number],\n      default: 0\n    },\n    removable: {\n      type: Boolean,\n      default: false\n    },\n    hideChangeButton: {\n      type: Boolean,\n      default: false\n    },\n    autoToggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    toggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    changeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 10000\n    },\n    alertOnError: {\n      type: Boolean,\n      default: true\n    },\n    customStrings: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  watch: {\n    prefill () {\n      if (this.prefill) {\n        this.preloadImage(this.prefill, this.prefillOptions)\n      } else {\n        this.removeImage()\n      }\n    }\n  },\n  data () {\n    return {\n      imageSelected: false,\n      previewHeight: 0,\n      previewWidth: 0,\n      draggingOver: false,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      strings: {\n        upload: '<p>Your device does not support file uploading.</p>',\n        drag: 'Drag an image or <br>click here to select a file',\n        tap: 'Tap here to select a photo <br>from your gallery',\n        change: 'Change Photo',\n        aspect: 'Landscape/Portrait',\n        remove: 'Remove Photo',\n        select: 'Select a Photo',\n        selected: '<p>Photo successfully selected!</p>',\n        fileSize: 'The file size exceeds the limit',\n        fileType: 'This file type is not supported.'\n      }\n    }\n  },\n  mounted () {\n    this.updateStrings()\n    if (this.prefill) {\n      this.preloadImage(this.prefill, this.prefillOptions)\n    }\n\n    this.$nextTick(() => {\n      window.addEventListener('resize', this.onResize)\n      this.onResize()\n    })\n    if (this.supportsPreview) {\n      this.pixelRatio = Math.round(window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI)\n      const canvas = this.$refs.previewCanvas\n      if (canvas.getContext) {\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.pixelRatio, this.pixelRatio)\n      }\n    }\n    if (this.accept !== 'image/*') {\n      this.fileTypes = this.accept.split(',')\n      this.fileTypes = this.fileTypes.map(s => s.trim())\n    }\n    this.canvasWidth = this.width != Number.MAX_SAFE_INTEGER ? this.width : this.$refs.container.clientWidth \n    this.canvasHeight = this.height != Number.MAX_SAFE_INTEGER ? this.height : this.canvasWidth\n    this.previewWidth = this.canvasWidth\n    this.previewHeight = this.canvasHeight\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.onResize)\n  },\n  methods: {\n    updateStrings () {\n      for (let s in this.customStrings) {\n        if (s in this.strings && typeof this.customStrings[s] === 'string') {\n          this.strings[s] = this.customStrings[s]\n        }\n      }\n    },\n    onClick () {\n      if (!this.imageSelected) {\n        this.selectImage()\n        return\n      }\n\n      if (this.changeOnClick) {\n        this.selectImage()\n      }\n\n      this.$emit('click')\n    },\n    onResize () {\n      if (this.resizeCanvas() && this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n    },\n    onDragEnter () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = true\n    },\n    onDragLeave () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = false\n    },\n    onFileDrop (e) {\n      this.onDragLeave()\n      this.$refs.fileInput.files = e.target.files || e.dataTransfer.files\n      this.onFileChange(e)\n    },\n    onFileChange (e, prefill) {\n      const files = e.target.files || e.dataTransfer.files\n      if (!files.length) {\n        return\n      }\n      if (files[0].size <= 0 || files[0].size > this.size * 1024 * 1024) {\n        this.$emit('error', {\n          type: 'fileSize',\n          fileSize: files[0].size,\n          fileType: files[0].type,\n          fileName: files[0].name,\n          message: this.strings.fileSize + ' (' + this.size + 'MB)'\n        })\n        if (this.alertOnError) {\n          alert(this.strings.fileSize + ' (' + this.size + 'MB)')\n        }\n        return\n      }\n      if (files[0].name === this.fileName && files[0].size === this.fileSize && this.fileModified === files[0].lastModified) {\n        return\n      }\n\n      this.file = files[0]\n      this.fileName = files[0].name\n      this.fileSize = files[0].size\n      this.fileModified = files[0].lastModified\n      this.fileType = files[0].type.split(';')[0]\n\n      if (this.accept === 'image/*') {\n        if (this.fileType.substr(0, 6) !== 'image/') {\n          return\n        }\n      } else {\n        if (this.fileTypes.indexOf(this.fileType) === -1) {\n          this.$emit('error', {\n            type: 'fileType',\n            fileSize: this.fileSize,\n            fileType: this.fileType,\n            fileName: this.fileName,\n            message: this.strings.fileType\n          })\n          if (this.alertOnError) {\n            alert(this.strings.fileType)\n          }\n          return\n        }\n      }\n      this.imageSelected = true\n      this.image = ''\n      if (this.supportsPreview) {\n        this.loadImage(files[0], prefill || false)\n      } else {\n        if (prefill) {\n          this.$emit('prefill')\n        } else {\n          this.$emit('change', this.image)\n        }\n      }\n    },\n    loadImage (file, prefill) {\n      this.getEXIFOrientation(file, orientation => {\n        this.setOrientation(orientation)\n        let reader = new FileReader()\n        reader.onload = e => {\n          this.image = e.target.result\n          this.imageObject = new Image()\n          this.imageObject.onload = () => {\n            if (this.autoToggleAspectRatio) {\n              let canvasOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n              let imageOrientation = this.getOrientation(this.imageObject.width, this.imageObject.height)\n              if (canvasOrientation !== imageOrientation) {\n                this.rotateCanvas()\n              }\n            }\n            this.drawImage(this.imageObject)\n          }\n          this.imageObject.src = this.image\n        }\n        reader.readAsDataURL(file)\n      })\n    },\n    drawImage (image) {\n      this.imageWidth = image.width\n      this.imageHeight = image.height\n      this.imageRatio = image.width / image.height\n      let offsetX = 0\n      let offsetY = 0\n      let scaledWidth = this.previewWidth\n      let scaledHeight = this.previewHeight\n      const previewRatio = this.previewWidth / this.previewHeight\n      if (this.crop) {\n        if (this.imageRatio >= previewRatio) {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        } else {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        }\n      } else {\n        if (this.imageRatio >= previewRatio) {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        } else {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        }\n      }\n      const canvas = this.$refs.previewCanvas\n      canvas.style.background = 'none'\n      canvas.width = this.previewWidth * this.pixelRatio\n      canvas.height = this.previewHeight * this.pixelRatio\n      this.context.setTransform(1, 0, 0, 1, 0, 0)\n      this.context.clearRect(0, 0, canvas.width, canvas.height)\n      if (this.rotate && typeof this.imageObject.style.imageOrientation === 'undefined') {\n        this.context.translate(offsetX * this.pixelRatio, offsetY * this.pixelRatio)\n        this.context.translate(scaledWidth / 2 * this.pixelRatio, scaledHeight / 2 * this.pixelRatio)\n        this.context.rotate(this.rotate)\n        offsetX = -scaledWidth / 2\n        offsetY = -scaledHeight / 2\n      }\n      this.context.drawImage(image,\n        offsetX * this.pixelRatio,\n        offsetY * this.pixelRatio,\n        scaledWidth * this.pixelRatio,\n        scaledHeight * this.pixelRatio)\n    },\n    selectImage () {\n      this.$refs.fileInput.click()\n    },\n    removeImage () {\n      this.$refs.fileInput.value = ''\n      this.$refs.fileInput.type = ''\n      this.$refs.fileInput.type = 'file'\n      this.fileName = ''\n      this.fileType = ''\n      this.fileSize = 0\n      this.fileModified = 0\n      this.imageSelected = false\n      this.image = ''\n      this.file = null\n      this.imageObject = null\n      this.$refs.previewCanvas.style.backgroundColor = 'rgba(200,200,200,.25)'\n      this.$refs.previewCanvas.width = this.previewWidth * this.pixelRatio\n      this.$emit('remove')\n    },\n    rotateImage () {\n      this.rotateCanvas()\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n\n      let newOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n      this.$emit('aspectratiochange', newOrientation)\n    },\n    resizeCanvas () {\n      let previewRatio = this.canvasWidth / this.canvasHeight\n      let newWidth = this.$refs.container.clientWidth\n      if( !newWidth ) return false;\n      if (!this.toggleAspectRatio && !this.autoToggleAspectRatio && newWidth === this.containerWidth) {\n        return false;\n      }\n      this.containerWidth = newWidth\n      this.previewWidth = Math.min(this.containerWidth - this.margin * 2, this.canvasWidth)\n      this.previewHeight = this.previewWidth / previewRatio\n      return true;\n    },\n    getOrientation (width, height) {\n      let orientation = 'square'\n\n      if (width > height) {\n        orientation = 'landscape'\n      } else if (width < height) {\n        orientation = 'portrait'\n      }\n\n      return orientation\n    },\n    switchCanvasOrientation () {\n      const canvasWidth = this.canvasWidth\n      const canvasHeight = this.canvasHeight\n\n      this.canvasWidth = canvasHeight\n      this.canvasHeight = canvasWidth\n    },\n    rotateCanvas () {\n      this.switchCanvasOrientation()\n      this.resizeCanvas()\n    },\n    setOrientation (orientation) {\n      this.rotate = false\n      if (orientation === 8) {\n        this.rotate = -Math.PI / 2\n      } else if (orientation === 6) {\n        this.rotate = Math.PI / 2\n      } else if (orientation === 3) {\n        this.rotate = -Math.PI\n      }\n    },\n    getEXIFOrientation (file, callback) {\n      var reader = new FileReader()\n      reader.onload = e => {\n        var view = new DataView(e.target.result)\n        if (view.getUint16(0, false) !== 0xFFD8) {\n          return callback(-2)\n        }\n        var length = view.byteLength\n        var offset = 2\n        while (offset < length) {\n          var marker = view.getUint16(offset, false)\n          offset += 2\n          if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n              return callback(-1)\n            }\n            var little = view.getUint16(offset += 6, false) === 0x4949\n            offset += view.getUint32(offset + 4, little)\n            var tags = view.getUint16(offset, little)\n            offset += 2\n            for (var i = 0; i < tags; i++) {\n              if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                return callback(view.getUint16(offset + (i * 12) + 8, little))\n              }\n            }\n          } else if ((marker & 0xFF00) !== 0xFF00) {\n            break\n          } else {\n            offset += view.getUint16(offset, false)\n          }\n        }\n        return callback(-1)\n      }\n      reader.readAsArrayBuffer(file.slice(0, 65536))\n    },\n    preloadImage (source, options) {\n      // ie 11 support\n      let File = window.File\n      try {\n        new File([], '') // eslint-disable-line\n      } catch (e) {\n        File = class File extends Blob {\n          constructor (chunks, filename, opts = {}) {\n            super(chunks, opts)\n            this.lastModifiedDate = new Date()\n            this.lastModified = +this.lastModifiedDate\n            this.name = filename\n          }\n        }\n      }\n      options = Object.assign({}, options)\n      if (typeof source === 'object') {\n        this.imageSelected = true\n        this.image = ''\n        if (this.supportsPreview) {\n          this.loadImage(source, true)\n        } else {\n          this.$emit('prefill')\n        }\n        return\n      }\n      if (source.indexOf('data:') === -1) {\n        if (source.indexOf('?') !== -1) {\n          source += '&_=' + (new Date().getTime())\n        } else {\n          source += '?_=' + (new Date().getTime())\n        }\n      }\n      let headers = new Headers()\n      headers.append('Accept', 'image/*')\n      fetch(source, {\n        method: 'GET',\n        mode: 'cors',\n        headers: headers\n      }).then(response => {\n        return response.blob()\n      })\n      .then(imageBlob => {\n        let e = { target: { files: [] } }\n        const fileName = options.fileName || source.split('/').slice(-1)[0]\n        let mediaType = options.mediaType || imageBlob.type || ('image/' + (options.fileType || fileName.split('?')[0].split('.').slice(-1)[0].split('?')[0]))\n        mediaType = mediaType.replace('jpg', 'jpeg')\n        mediaType = mediaType.replace('image/svg', 'image/svg+xml')\n        if (mediaType === 'image/svg') {\n          mediaType = 'image/svg+xml'\n        }\n        e.target.files[0] = new File([imageBlob], fileName, { type: mediaType })\n        this.onFileChange(e, true)\n      })\n      .catch(err => {\n        this.$emit('error', {\n          type: 'failedPrefill',\n          message: 'Failed loading prefill image: ' + err\n        })\n        if (this.alertOnError) {\n          alert('Failed loading prefill image: ' + err)\n        }\n      })\n    }\n  },\n  computed: {\n    supportsUpload () {\n      if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\\/(1.0|2.0|2.5|3.0))/)) {\n        return false\n      }\n      const el = document.createElement('input')\n      el.type = 'file'\n      return !el.disabled\n    },\n    supportsPreview () {\n      return window.FileReader && !!window.CanvasRenderingContext2D\n    },\n    supportsDragAndDrop () {\n      const div = document.createElement('div')\n      return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && !('ontouchstart' in window || navigator.msMaxTouchPoints)\n    },\n    computedClasses () {\n      const classObject = {}\n      classObject['dragging-over'] = this.draggingOver\n      return classObject\n    },\n    fontSize () {\n      return Math.min(0.04 * this.previewWidth, 21) + 'px'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.picture-input {\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n}\n.preview-container {\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n  cursor: pointer;\n  overflow: hidden;\n  transform: translate3d(0,0,0);\n}\n.picture-preview {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 10001;\n  box-sizing: border-box;\n  background-color: rgba(200,200,200,.25);\n}\n.picture-preview.dragging-over {\n  filter: brightness(0.5);\n}\n.picture-inner {\n  position: relative;\n  z-index: 10002;\n  pointer-events: none;\n  box-sizing: border-box;\n  margin: 1em auto;\n  padding: 0.5em;\n  border: .3em dashed rgba(66,66,66,.15);\n  border-radius: 8px;\n  width: calc(100% - 2.5em);\n  height: calc(100% - 2.5em);\n  display: table;\n}\n.picture-inner .picture-inner-text {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  font-size: 2em;\n  line-height: 1.5;\n}\nbutton {\n  margin: 1em .25em;\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}