{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nconst dblib = {\n  data() {\n    return {\n      isLoading: false,\n      rfid: -1,\n      arduino: 'http://192.168.178.157',\n      database: 'localhost:####',\n      product: []\n    };\n  },\n  methods: {\n    async login() {\n      this.isLoading = true;\n      this.rfid = -1;\n      console.log('getting RFID');\n      this.scanRFID();\n      console.log('checking uuid');\n      this.verifyLogin();\n      this.isLoading = false;\n    },\n    // Waits for the arduino to send a uuid.\n    // currently it will not time out or anything.\n    async scanRFID() {\n      axios.get(this.arduino + '/rfid').then(response => {\n        this.rfid = response;\n      }).catch(error => {\n        this.isLoading = false;\n        console.log(error);\n      });\n    },\n    // Checks the uuid gotten from the arduino against database.\n    // if valid user, go to the browse page.\n    async verifyLogin() {\n      axios.get(this.database + '/users?' + this.rfid).then(response => {\n        if (response.data) {\n          this.$router.push('/browse');\n        } else {\n          console.log('invalid uuid.');\n        }\n      }).catch(error => {\n        this.isLoading = false;\n        console.log(error);\n      });\n    }\n  },\n  // Get items from the database, store them in\n  // products.\n  async getItems() {\n    this.isLoading = true;\n    axios.get(this.database + '/items').then(response => response.json()).then(json => {\n      this.products = json;\n    }).catch(error => {\n      console.log(error);\n    });\n    this.isLoading = false;\n  },\n  // get a singular product from the database\n  async getProduct(pid) {\n    this.isLoading = true;\n    axios.get(this.database + '/items?' + pid).then(response => response.json()).then(json => this.product = json.data);\n  }\n};\nexport default dblib;","map":{"version":3,"names":["axios","dblib","data","isLoading","rfid","arduino","database","product","methods","login","console","log","scanRFID","verifyLogin","get","then","response","catch","error","$router","push","getItems","json","products","getProduct","pid"],"sources":["C:/Users/20223065/Documents/donationboxv2/src/dblib.js"],"sourcesContent":["import axios from 'axios'\r\nconst dblib = {\r\n\r\n  data() {\r\n    return {\r\n      isLoading: false,\r\n      rfid: -1,\r\n      arduino: 'http://192.168.178.157',\r\n      database: 'localhost:####',\r\n      product: []\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async login() {\r\n      this.isLoading = true\r\n      this.rfid = -1\r\n      console.log('getting RFID')\r\n      this.scanRFID()\r\n      console.log('checking uuid')\r\n      this.verifyLogin()\r\n      this.isLoading = false\r\n    },\r\n\r\n\r\n    // Waits for the arduino to send a uuid.\r\n    // currently it will not time out or anything.\r\n    async scanRFID() {\r\n      axios.get(this.arduino + '/rfid')\r\n        .then(response => { this.rfid = response })\r\n        .catch(error => {\r\n          this.isLoading = false\r\n          console.log(error)\r\n        })\r\n    },\r\n\r\n    // Checks the uuid gotten from the arduino against database.\r\n    // if valid user, go to the browse page.\r\n    async verifyLogin() {\r\n      axios.get(this.database + '/users?' + this.rfid)\r\n        .then(response => {\r\n          if (response.data) {\r\n            this.$router.push('/browse')\r\n          } else {\r\n            console.log('invalid uuid.')\r\n          }\r\n        })\r\n        .catch(error => {\r\n          this.isLoading = false\r\n          console.log(error)\r\n        })\r\n    },\r\n  },\r\n\r\n  // Get items from the database, store them in\r\n  // products.\r\n  async getItems() {\r\n    this.isLoading = true\r\n    axios.get(this.database + '/items')\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.products = json\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n    this.isLoading = false\r\n  },\r\n\r\n  // get a singular product from the database\r\n  async getProduct(pid) {\r\n    this.isLoading = true\r\n    axios.get(this.database + '/items?' + pid)\r\n      .then(response => response.json())\r\n      .then(json => this.product = json.data)\r\n  }\r\n}\r\n\r\nexport default dblib"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,KAAK,GAAG;EAEZC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,IAAI,EAAE,CAAC,CAAC;MACRC,OAAO,EAAE,wBAAwB;MACjCC,QAAQ,EAAE,gBAAgB;MAC1BC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAACN,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;MACdM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,IAAI,CAACC,QAAQ,CAAC,CAAC;MACfF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAI,CAACE,WAAW,CAAC,CAAC;MAClB,IAAI,CAACV,SAAS,GAAG,KAAK;IACxB,CAAC;IAGD;IACA;IACA,MAAMS,QAAQA,CAAA,EAAG;MACfZ,KAAK,CAACc,GAAG,CAAC,IAAI,CAACT,OAAO,GAAG,OAAO,CAAC,CAC9BU,IAAI,CAACC,QAAQ,IAAI;QAAE,IAAI,CAACZ,IAAI,GAAGY,QAAQ;MAAC,CAAC,CAAC,CAC1CC,KAAK,CAACC,KAAK,IAAI;QACd,IAAI,CAACf,SAAS,GAAG,KAAK;QACtBO,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC;IAED;IACA;IACA,MAAML,WAAWA,CAAA,EAAG;MAClBb,KAAK,CAACc,GAAG,CAAC,IAAI,CAACR,QAAQ,GAAG,SAAS,GAAG,IAAI,CAACF,IAAI,CAAC,CAC7CW,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,CAACd,IAAI,EAAE;UACjB,IAAI,CAACiB,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;QAC9B,CAAC,MAAM;UACLV,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B;MACF,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;QACd,IAAI,CAACf,SAAS,GAAG,KAAK;QACtBO,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MACpB,CAAC,CAAC;IACN;EACF,CAAC;EAED;EACA;EACA,MAAMG,QAAQA,CAAA,EAAG;IACf,IAAI,CAAClB,SAAS,GAAG,IAAI;IACrBH,KAAK,CAACc,GAAG,CAAC,IAAI,CAACR,QAAQ,GAAG,QAAQ,CAAC,CAChCS,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACO,IAAI,IAAI;MACZ,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CAAC,CACDL,KAAK,CAACC,KAAK,IAAI;MACdR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IACpB,CAAC,CAAC;IACJ,IAAI,CAACf,SAAS,GAAG,KAAK;EACxB,CAAC;EAED;EACA,MAAMqB,UAAUA,CAACC,GAAG,EAAE;IACpB,IAAI,CAACtB,SAAS,GAAG,IAAI;IACrBH,KAAK,CAACc,GAAG,CAAC,IAAI,CAACR,QAAQ,GAAG,SAAS,GAAGmB,GAAG,CAAC,CACvCV,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACO,IAAI,IAAI,IAAI,CAACf,OAAO,GAAGe,IAAI,CAACpB,IAAI,CAAC;EAC3C;AACF,CAAC;AAED,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}